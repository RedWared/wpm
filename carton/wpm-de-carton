deps=("")

if [ -f "$dbdir/$reponame.db" ]; then
	pkgs=($(zcat "$dbdir/$reponame.db" | grep PKG: -A1 | cut -f3 -d ':' | grep -v \\--))
else
	pkgs=()
fi

inspkgs=($(basename -a $pkgsdir/*))
findpkg=false

if [ "$1" = "update" ]; then
	update=false
	for pkg in "${inspkgs[@]}"; do
		source $pkgsdir/$pkg
		newver=$(zcat $dbdir/$reponame.db | cut -f2 -d ':' | grep $pkg -A1 | grep -v $pkg)
		if ! [ "$localver" = "$newver" ]; then
			echo "actualizando $pkg $localver -> $newver"
			echo "Desinstalando $2 version vieja: $localver"
			for file in "${files[@]}"; do
				rm -rvf "$rootdir/$file"
			done
			rm "$pkgsdir/$pkg"

			echo "Descargando $pkg version nueva: $newver"
			curl -L $repo/$pkg.wpkg -o $pkgsdldir/$pkg-$newver.wpkg

			echo "Instalando $pkg"
			tar -xzvf $pkgsdldir/$pkg-$newver.wpkg -C $rootdir
			mv $rootdir/$pkg $pkgsdir/$pkg
			update=true
		fi
	done
	if [ $update = false ]; then
		echo "Todo esta actualizado"
	fi
fi

if [ "$1" = "remove" ]; then
	if ! [ "$2" = "" ]; then
		for pkg in "${inspkgs[@]}"; do
			if [ "$2" = "$pkg" ]; then
				findpkg=true
				if ! [ -f "$pkgsdir/$pkg" ]; then
					findpkg=false
					break
				fi
				echo "Desinstalando $2"
				source  $pkgsdir/$pkgs

				for file in "${files[@]}"; do
					rm -rvf "$rootdir/$file"
				done

				rm "$pkgsdir/$2"
				break
			fi
		done
		if [ $findpkg = false ]; then
			echo "El paquete $2 no esta instalado"
		fi
	else
		echo "$0 remove requiere un nombre de un paquete como argumento"
	fi
fi

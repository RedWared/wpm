#!/bin/bash
echo "Wah Package-Manager de cartón"

if [ -f /etc/wpm.conf ]; then
	source /etc/wpm.conf
	else
	if [ -f $HOME/.config/wpm.conf ]; then
		source $HOME/.config/wpm.conf
	else
		echo "Error: no se encontro la configuración"
		exit 1
	fi
fi

deps=("")

if [ -f "$dbdir/$reponame.db" ]; then
	pkgs=($(zcat "$dbdir/$reponame.db" | grep PKG: -A1 | cut -f3 -d ':' | grep -v \\--))
else
	pkgs=()
fi

inspkgs=($(basename -a $pkgsdir/*))
findpkg=false

if [ "$1" = "update" ]; then
	update=false
	for pkg in "${inspkgs[@]}"; do
		source $pkgsdir/$pkg
		newver=$(zcat $dbdir/$reponame.db | cut -f2 -d ':' | grep $pkg -A1 | grep -v $pkg)
		if ! [ "$localver" = "$newver" ]; then
			echo "actualizando $pkg $localver -> $newver"
			echo "Desinstalando $2 version vieja: $localver"
			for file in "${files[@]}"; do
				rm -rvf "$rootdir/$file"
			done
			rm "$pkgsdir/$pkg"

			echo "Descargando $pkg version nueva: $newver"
			curl $repo/$pkg.wpkg -o $pkgsdldir/$pkg-$newver.wpkg

			echo "Instalando $pkg"
			tar -xzvf $pkgsdldir/$pkg-$newver.wpkg -C $rootdir
			mv $rootdir/$pkg $pkgsdir/$pkg
			update=true
		fi
	done
	if [ $update = false ]; then
		echo "Todo esta actualizado"
	fi
fi

if [ "$1" = "sync" ]; then
	if ! [ -d $dbdir ]; then
		echo "La base de datos local no existe"
		mkdir -p $dbdir
	fi
	echo "Descargando base de datos"
	curl $repo/$reponame.db -o $dbdir/$reponame.db
fi

if [ "$1" = "install" ]; then
	if ! [ "$2" = "" ]; then
		for pkg in "${pkgs[@]}"; do
			if [ "$2" = "$pkg" ]; then
				findpkg=true
				if [ -f $pkgsdir/$pkg ]; then
					echo "$pkg ya esta instalado"
				else
					if ! [ -d $pkgsdir ]; then
						echo "La base de datos de paquetes instalados no existe, creandola"
						mkdir -p $pkgsdir
					fi
					if ! [ -d $pkgsdldir ]; then
						mkdir -p $pkgsdldir
					fi
					echo "Descargando $pkg"
					curl $repo/$pkg.wpkg -o $pkgsdldir/$pkg.wpkg
					echo "Instalando $pkg"
					tar -xzvf $pkgsdldir/$pkg.wpkg -C $rootdir
					mv $rootdir/$pkg $pkgsdir/$pkg

					source $pkgsdir/$pkg
					if ! [ "${deps[@]}" = "" ]; then
						echo "Dependencias: ${deps[@]}"
						for dep in "${deps[@]}"; do
							$0 install $dep
						done
					fi
				fi
				break
			fi
		done
		if [ $findpkg = false ]; then
			echo "Paquete $2 no encontrado"
		fi
	else
		echo "$0 install requiere un nombre de paquete como argumento"
	fi
fi

if [ "$1" = "remove" ]; then
	if ! [ "$2" = "" ]; then
		for pkg in "${inspkgs[@]}"; do
			if [ "$2" = "$pkg" ]; then
				findpkg=true
				if ! [ -f "$pkgsdir/$pkg" ]; then
					findpkg=false
					break
				fi
				echo "Desinstalando $2"
				source  $pkgsdir/$pkgs

				for file in "${files[@]}"; do
					rm -rvf "$rootdir/$file"
				done

				rm "$pkgsdir/$2"
				break
			fi
		done
		if [ $findpkg = false ]; then
			echo "El paquete $2 no esta instalado"
		fi
	else
		echo "$0 remove requiere un nombre de un paquete como argumento"
	fi
fi
